#!/bin/bash
. ./cmd.sh
. ./path.sh
set -e

stage=0
xvector_dir=xvectors #path to extracted xvectors
KALDI_PATH=/home/dcase/Documents/yuhuan/datasets/kaldi # path to kaldi root
folds_path=data/folds # path to where the train/test split folds will be stored
cfg_path=configs/example.cfg # path to main cfg, $folds_path is data_path in the cfg
nnet_dir=0006_callhome_diarization_v2_1a/exp/xvector_nnet_1a # the xvector model path
callhome_path=export/sid00sg1/data # path to raw callhome data
num_components=1024 # the number of UBM components (used for VB resegmentation)
ivector_dim=400 # the dimension of i-vector (used for VB resegmentation)
train_cmd=run.pl
nj=10

output_rttm_dir=exp/VB/rttm

num_folds=5 #default num folds is 5

# link all directories needed from KALDI
if [ $stage -le 0 ]; then
    ln -s $KALDI_PATH/egs/callhome_diarization/v1/diarization .
    ln -s $KALDI_PATH/egs/callhome_diarization/v1/local .
    ln -s $KALDI_PATH/egs/callhome_diarization/v1/utils .
    ln -s $KALDI_PATH/egs/callhome_diarization/v1/sid .
    ln -s $KALDI_PATH/egs/callhome_diarization/v1/steps .
fi

if [ $stage -le 1 ]; then
    local/make_callhome.sh $callhome_path data
    utils/combine_data.sh data/callhome_full data/callhome1 data/callhome2
fi

if [ $stage -le 2 ]; then
    steps/make_mfcc.sh --mfcc-config conf/mfcc.conf --nj $nj \
      --cmd "$train_cmd" --write-utt2num-frames true \
      data/callhome_full exp/make_mfcc mfcc
    utils/fix_data_dir.sh data/callhome_full

    sid/compute_vad_decision.sh --nj $nj --cmd "$train_cmd" \
      data/callhome_full exp/make_vad mfcc
    utils/fix_data_dir.sh data/callhome_full

    local/nnet3/xvector/prepare_feats.sh --nj 40 --cmd "$train_cmd" \
        data/callhome_full data/callhome_cmn exp/callhome_cmn
    cp data/callhome_full/vad.scp data/callhome_cmn/
    cp data/callhome_full/segments data/callhome_cmn/
    utils/fix_data_dir.sh data/callhome_cmn

fi

if [ $stage -le 3 ]; then
    diarization/nnet3/xvector/extract_xvectors.sh --cmd "$train_cmd" \
        --nj $nj --window 1.5 --period 0.75 --apply-cmn false \
        --min-segment 0.5 $nnet_dir \
        data/callhome_cmn $xvector_dir
fi

if [ $stage -le 4 ]; then
   # makes k-fold dataset (default: 5 folds)
   python -m scripts.make_kfold_callhome $xvector_dir data/callhome/fullref.rttm $folds_path $num_folds
   cp data/callhome/fullref.rttm $folds_path
fi

if [ $stage -le 5 ]; then
    # train on each fold of data sequentially
    for i in `seq 0 $(( $num_folds - 1 ))`; do
        python train.py --cfg $cfg_path --fold $i || exit 1;
    done
fi

if [ $stage -le 6 ]; then
    python predict.py --cfg $cfg_path
fi

if [ $stage -le 7 ]; then
    # Clustering
    python cluster.py --cfg $cfg_path
fi


if [ $stage -le 8 ]; then
    steps/make_mfcc.sh --mfcc-config conf/mfcc.conf --nj $nj \
            --cmd "$train_cmd" --write-utt2num-frames true \
                    data/callhome exp/make_mfcc mfcc
    utils/fix_data_dir.sh data/callhome
fi

if [ $stage -le 9 ]; then
    # the rttm output after VB resegmentation would be stored in output_rttm_dir
    
    mkdir -p $output_rttm_dir || exit 1;

    # the fulltest.rttm generated by cluster.py
    init_rttm_file=exp/example_models_folder/fulltest.rttm

    diarization/VB_resegmentation.sh --nj 4 --cmd "$train_cmd --mem 10G" \
        --initialize 1 data/callhome $init_rttm_file exp/VB \
    exp/diag_ubm_$num_components/final.dubm exp/extractor_diag_c${num_components}_i${ivector_dim}/final.ie || exit 1;
fi

if [ $stage -le 10 ]; then
    md-eval.pl -1 -c 0.25 -r data/folds/fullref.rttm -s $output_rttm_dir/VB_rttm 2> exp/VB/log/VB_DER.log > exp/VB/VB_DER.txt
    der=$(grep -oP 'DIARIZATION\ ERROR\ =\ \K[0-9]+([.][0-9]+)?' \
    exp/VB/VB_DER.txt)
    # After VB resegmentation, DER: 6.48%
    echo "After VB resegmentation, DER: $der%"
fi



